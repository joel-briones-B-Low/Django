instalar django


esto lo que hace es crear la carpeta nombre para poder crear el proyecto ->
django-admin startproject --nombre-- .


esto crea las migraciones para la base de datos->
 py .\manage.py makemigrations

para crear la sqllite3 (por defecto django usa esta) ->
python manage.py migrate


correr el servidor por defecto de python (no es muy recomendable usar ese servidor
porque no es muy seguro y ademas no admite mucha carga de trabajo) en el puerto ->
python manage.py runserver 8080

ver la lista de comandos de django
python manage.py --help


crear la aplicacion ->
python manage.py startapp nombre_aplicacion


py manage.py shell

el shell de django es poder ejecutar comandos
pero desde la consola del mismo project, eso nos
a hacer pruebas de inserciones, modificacions de una manera mas rapida
sin usar el UX


from myapp.models import Project, Task

p = Project('app movil') -- da error, debes definir los parametros a usar con sus valores
p.save() -- guarda el objeto en la bada
p = Project(nombre='app movil') -- instacia el objeto a la variable p
Project.objects.get(id=1) -- select especifico los objetos Project
Project.objects.get(nombre='app web') 
p = Project.objects.get(id=1) -- elegir un referencia al objeto
p.task_set.create(titulo='crear visa') -- crear una tarea relacionada con el projecto previamente elegido
p.task_set.get(id=1) -- traer las tareas del objeto que tengan esa id
p.task_set.all() -- traer las tareas del objeto padre

Project.objects.filter(nombre__startswith='app')     -- filtrar nombre empieza con

""" ___________________________________________

>>> persona = Persona(nombre='Joel',apellido='briones') 
(env) PS D:\Estudiar\Django\Django> py .\manage.py shell
Python 3.12.9 (tags/v3.12.9:fdb8142, Feb  4 2025, 15:27:58) [MSC v.1942 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
(InteractiveConsole)
>>> from app_prueba.models import Persona, Usuario
>>> Persona.objects.all() 
<QuerySet [<Persona: Joel>]>
>>> Persona.objects.get(nombre='joel') 
Traceback (most recent call last):
  File "<console>", line 1, in <module>
  File "D:\Estudiar\Django\Django\env\Lib\site-packages\django\db\models\manager.py", line 87, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\Estudiar\Django\Django\env\Lib\site-packages\django\db\models\query.py", line 649, in get
    raise self.model.DoesNotExist(
app_prueba.models.Persona.DoesNotExist: Persona matching query does not exist.
>>> Persona.objects.get(nombre='Joel') 
<Persona: Joel>
>>> persona = Persona.objects.get(pk=1) 
>>> persona.usuario_set.all()
<QuerySet []>
>>> persona.usuario_set.create(nombre_usuario='joel123', contrasenia='joel123') 
<Usuario: joel123>
>>> usuario = persona.usuario_set.create(nombre_usuario='joel321', contrasenia='joel321') 
>>> usuario.persona
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: 'Usuario' object has no attribute 'persona'. Did you mean: 'id_persona'?
>>> usuario.Persona 
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: 'Usuario' object has no attribute 'Persona'
>>> usuario.id_persona
<Persona: Joel>
>>> persona.usuario_set.all()
<QuerySet [<Usuario: joel123>, <Usuario: joel321>]>
>>> persona.usuario_set.count()
2
>>> Usuario.objects.filter(persona__nombre__contains='Joel') 
Traceback (most recent call last):
  File "<console>", line 1, in <module>
  File "D:\Estudiar\Django\Django\env\Lib\site-packages\django\db\models\manager.py", line 87, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\Estudiar\Django\Django\env\Lib\site-packages\django\db\models\query.py", line 1476, in filter
    return self._filter_or_exclude(False, args, kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\Estudiar\Django\Django\env\Lib\site-packages\django\db\models\query.py", line 1494, in _filter_or_exclude
    clone._filter_or_exclude_inplace(negate, args, kwargs)
  File "D:\Estudiar\Django\Django\env\Lib\site-packages\django\db\models\query.py", line 1501, in _filter_or_exclude_inplace
    self._query.add_q(Q(*args, **kwargs))
  File "D:\Estudiar\Django\Django\env\Lib\site-packages\django\db\models\sql\query.py", line 1609, in add_q
    clause, _ = self._add_q(q_object, self.used_aliases)
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\Estudiar\Django\Django\env\Lib\site-packages\django\db\models\sql\query.py", line 1641, in _add_q
    child_clause, needed_inner = self.build_filter(
                                 ^^^^^^^^^^^^^^^^^^
  File "D:\Estudiar\Django\Django\env\Lib\site-packages\django\db\models\sql\query.py", line 1491, in build_filter
    lookups, parts, reffed_expression = self.solve_lookup_type(arg, summarize)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\Estudiar\Django\Django\env\Lib\site-packages\django\db\models\sql\query.py", line 1303, in solve_lookup_type
    _, field, _, lookup_parts = self.names_to_path(lookup_splitted, self.get_meta())
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\Estudiar\Django\Django\env\Lib\site-packages\django\db\models\sql\query.py", line 1768, in names_to_path
    raise FieldError(
django.core.exceptions.FieldError: Cannot resolve keyword 'persona' into field. Choices are: contrasenia, id, id_persona, id_persona_id, nombre_usuario
>>> Usuario.objects.filter(id_persona__nombre__contains='Joel') 
<QuerySet [<Usuario: joel123>, <Usuario: joel321>]>





